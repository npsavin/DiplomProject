{result:[{name : "CVE-2014-0130",
symptom : "This module does not perform adequate input sanitization which could allow an attacker to use a specially crafted request to retrieve arbitrary files from the rails application server ; This module does not perform adequate input sanitization which could allow an attacker to use a specially crafted request to retrieve arbitrary files from the rails application server",
threat : "",
consequences : "This module does not perform adequate input sanitization which could allow an attacker to use a specially crafted request to retrieve arbitrary files from the rails application server ; To determine if you are vulnerable, search your application\'s routes files for \'*action\' and if you find any, use one of the work arounds below ; This module does not perform adequate input sanitization which could allow an attacker to use a specially crafted request to retrieve arbitrary files from the rails application server ; To determine if you are vulnerable, search your application\'s routes files for \'*action\' and if you find any, use one of the work arounds below ; Fixes: CVE-2014-0130 --- actionpack/lib/abstract_controller/base.rb | 28 +++++++++++++++++++--- .../new_base/render_implicit_action_test.rb | 17 ++++++++++++- 2 files changed, 41 insertions(+), 4 deletions(-) diff --git a/actionpack/lib/abstract_controller/base.rb b/actionpack/lib/abstract_controller/base.rb index fd6a46f..2541125 100644 --- a/actionpack/lib/abstract_controller/base.rb +++ b/actionpack/lib/abstract_controller/base.rb @@ -112,7 +112,7 @@ module AbstractController def process(action, *args) @_action_name = action_name = action.to_s - unless action_name = method_for_action(action_name) + unless action_name = _find_action_name(action_name) raise ActionNotFound, \"The action \'#{action}\' could not be found for #{self.class.name}\" end @@ -138,7 +138,7 @@ module AbstractController # available action consider actions that are also available # through other means, for example, implicit render ones ; Fixes: CVE-2014-0130 --- actionpack/lib/abstract_controller/base.rb | 28 +++++++++++++++++++--- .../new_base/render_implicit_action_test.rb | 17 ++++++++++++- 2 files changed, 41 insertions(+), 4 deletions(-) diff --git a/actionpack/lib/abstract_controller/base.rb b/actionpack/lib/abstract_controller/base.rb index af5de81..26f8160 100644 --- a/actionpack/lib/abstract_controller/base.rb +++ b/actionpack/lib/abstract_controller/base.rb @@ -127,7 +127,7 @@ module AbstractController def process(action, *args) @_action_name = action_name = action.to_s - unless action_name = method_for_action(action_name) + unless action_name = _find_action_name(action_name) raise ActionNotFound, \"The action \'#{action}\' could not be found for #{self.class.name}\" end @@ -160,7 +160,7 @@ module AbstractController # ==== Returns # *  TrueClass ,  FalseClass  def available_action?(action_name) - method_for_action(action_name).present? + _find_action_name(action_name).present? end private @@ -204,6 +204,23 @@ module AbstractController end # Takes an action name and returns the name of the method that will + # handle the action ; Fixes: CVE-2014-0130 --- actionpack/lib/abstract_controller/base.rb | 28 +++++++++++++++++++--- .../new_base/render_implicit_action_test.rb | 17 ++++++++++++- 2 files changed, 41 insertions(+), 4 deletions(-) diff --git a/actionpack/lib/abstract_controller/base.rb b/actionpack/lib/abstract_controller/base.rb index af5de81..26f8160 100644 --- a/actionpack/lib/abstract_controller/base.rb +++ b/actionpack/lib/abstract_controller/base.rb @@ -127,7 +127,7 @@ module AbstractController def process(action, *args) @_action_name = action_name = action.to_s - unless action_name = method_for_action(action_name) + unless action_name = _find_action_name(action_name) raise ActionNotFound, \"The action \'#{action}\' could not be found for #{self.class.name}\" end @@ -160,7 +160,7 @@ module AbstractController # ==== Returns # *  TrueClass ,  FalseClass  def available_action?(action_name) - method_for_action(action_name).present? + _find_action_name(action_name).present? end private @@ -204,6 +204,23 @@ module AbstractController end # Takes an action name and returns the name of the method that will + # handle the action",
countermeasures : "So replace get \'my_url/*action\', controller: \'asdf\' with get \'my_url/:action\', controller: \'asdf\' If your application depends on this functionality, you will need to rename the route parameter and add an explicit action: get \'my_url/*template_path\', controller: \'asdf\', action: \'display\' Then add an action which renders explicitly: def display if !params[:template_path].index(\'.\') render file: params[:template_path] end end Note: The path check in this example may not be suitable for your application, take care Patches ------- To aid users who aren\'t able to upgrade immediately we have provided patches for the two supported release series ; Users of earlier unsupported releases are advised to upgrade as soon as possible as we cannot guarantee the continued availability of security fixes for unsupported releases ; So replace get \'my_url/*action\', controller: \'asdf\' with get \'my_url/:action\', controller: \'asdf\' If your application depends on this functionality, you will need to rename the route parameter and add an explicit action: get \'my_url/*template_path\', controller: \'asdf\', action: \'display\' Then add an action which renders explicitly: def display if !params[:template_path].index(\'.\') render file: params[:template_path] end end Note: The path check in this example may not be suitable for your application, take care Patches ------- To aid users who aren\'t able to upgrade immediately we have provided patches for the two supported release series ; Users of earlier unsupported releases are advised to upgrade as soon as possible as we cannot guarantee the continued availability of security fixes for unsupported releases"
looses : ""
}]}